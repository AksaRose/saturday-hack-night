generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @unique
  email        String       @unique @db.VarChar
  githubid     String       @unique @db.VarChar
  name         String?      @db.VarChar
  mobile       String?      @db.VarChar
  avatar       String       @db.VarChar
  collegeId    String?
  created_at   DateTime     @default(now())
  invites      Invite[]
  points       Points[]
  participated TeamMember[]
  college      College?     @relation(fields: [collegeId], references: [id])
}

model College {
  id     String   @id @unique
  name   String   @db.VarChar
  points Points[]
  user   User[]
}

model Event {
  id           String       @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String       @db.VarChar
  description  String       @db.VarChar
  image        String?      @db.VarChar
  details      String?      @db.VarChar
  date         DateTime
  location     String       @db.VarChar
  status       String?      @default("PENDING")
  created_at   DateTime     @default(now())
  invites      Invite[]
  points       Points[]
  teams        Team[]
  participants TeamMember[]
}

model Team {
  id             String       @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String       @db.VarChar
  repo           String       @db.VarChar
  eventId        String       @db.Uuid
  pitchStatus    String?      @default("PENDING") // COMPLETED, PENDING, ABSENT
  projectStatus  String?      @default("PENDING") // COMPLETED, BEST PROJECT, DROPPED, PENDING
  created_at     DateTime     @default(now())
  comments       String?      @db.VarChar
  completionTime String?      @default("PENDING") // ONTIME, LATE, PENDING
  invite         Invite[]
  event          Event        @relation(fields: [eventId], references: [id])
  members        TeamMember[]
}

model TeamMember {
  id      String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role    String? @default("MEMBER") // LEAD, MEMBER
  teamId  String  @db.Uuid
  userId  String
  eventId String  @db.Uuid
  event   Event   @relation(fields: [eventId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  @@unique([userId, eventId])
  @@unique([userId, teamId])
}

model Invite {
  id      String @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId  String @db.Uuid
  userId  String
  eventId String @db.Uuid
  event   Event  @relation(fields: [eventId], references: [id])
  team    Team   @relation(fields: [teamId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Points {
  id        String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  collegeId String?
  eventId   String   @db.Uuid
  points    Int      @default(0)
  college   College? @relation(fields: [collegeId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
